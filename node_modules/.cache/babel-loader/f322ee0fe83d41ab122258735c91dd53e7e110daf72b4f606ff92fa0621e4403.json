{"ast":null,"code":"import { apiFetch } from './api';\n\n// Storage helper functions\nconst storage = {\n  get(key, fallback) {\n    return JSON.parse(localStorage.getItem(key) || JSON.stringify(fallback));\n  },\n  set(key, value) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\nexport const UsersAPI = {\n  list: () => storage.get('gs_users', []),\n  updateRole: (id, role) => {\n    const users = storage.get('gs_users', []);\n    const next = users.map(u => u.id === id ? {\n      ...u,\n      role\n    } : u);\n    storage.set('gs_users', next);\n    return next;\n  }\n};\nexport const PlotsAPI = {\n  list: () => storage.get('gs_plots', [])\n};\nexport const FeedbackAPI = {\n  list: () => storage.get('gs_feedback', []),\n  create: fb => {\n    const all = storage.get('gs_feedback', []);\n    const next = [...all, {\n      ...fb,\n      id: crypto.randomUUID(),\n      createdAt: new Date().toISOString()\n    }];\n    storage.set('gs_feedback', next);\n    return next;\n  }\n};\nexport const BookingsAPI = {\n  // List all bookings (for admins/managers)\n  list: async () => {\n    try {\n      const response = await apiFetch('/api/bookings');\n      return response.bookings || [];\n    } catch (error) {\n      console.error('Error fetching bookings:', error);\n      return [];\n    }\n  },\n  // Create a new booking\n  create: async booking => {\n    try {\n      const response = await apiFetch('/api/bookings', {\n        method: 'POST',\n        body: JSON.stringify(booking)\n      });\n      return response.booking;\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      throw error;\n    }\n  },\n  // Get bookings for the current user\n  byUser: async userId => {\n    try {\n      const response = await apiFetch('/api/bookings/me');\n      return response.bookings || [];\n    } catch (error) {\n      console.error('Error fetching user bookings:', error);\n      return [];\n    }\n  },\n  // Get a specific booking by ID\n  getById: async id => {\n    try {\n      const response = await apiFetch(`/api/bookings/${id}`);\n      return response.booking;\n    } catch (error) {\n      console.error(`Error fetching booking ${id}:`, error);\n      return null;\n    }\n  },\n  // Update booking status (approve/reject)\n  updateStatus: async (id, status) => {\n    try {\n      const response = await apiFetch(`/api/bookings/${id}/status`, {\n        method: 'PATCH',\n        body: JSON.stringify({\n          status\n        })\n      });\n      return response.booking;\n    } catch (error) {\n      console.error(`Error updating booking status for ${id}:`, error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["apiFetch","storage","get","key","fallback","JSON","parse","localStorage","getItem","stringify","set","value","setItem","UsersAPI","list","updateRole","id","role","users","next","map","u","PlotsAPI","FeedbackAPI","create","fb","all","crypto","randomUUID","createdAt","Date","toISOString","BookingsAPI","response","bookings","error","console","booking","method","body","byUser","userId","getById","updateStatus","status"],"sources":["D:/full stacks/Garden/garden-scheduler/src/services/gardenService.js"],"sourcesContent":["import { apiFetch } from './api';\n\n// Storage helper functions\nconst storage = {\n  get(key, fallback) { \n    return JSON.parse(localStorage.getItem(key) || JSON.stringify(fallback)); \n  },\n  set(key, value) { \n    localStorage.setItem(key, JSON.stringify(value)); \n  },\n};\n\nexport const UsersAPI = {\n  list: () => storage.get('gs_users', []),\n  updateRole: (id, role) => {\n    const users = storage.get('gs_users', []);\n    const next = users.map(u => u.id === id ? { ...u, role } : u);\n    storage.set('gs_users', next);\n    return next;\n  }\n};\n\nexport const PlotsAPI = {\n  list: () => storage.get('gs_plots', []),\n};\n\nexport const FeedbackAPI = {\n  list: () => storage.get('gs_feedback', []),\n  create: (fb) => {\n    const all = storage.get('gs_feedback', []);\n    const next = [\n      ...all, \n      { \n        ...fb, \n        id: crypto.randomUUID(), \n        createdAt: new Date().toISOString() \n      }\n    ];\n    storage.set('gs_feedback', next);\n    return next;\n  }\n};\n\nexport const BookingsAPI = {\n  // List all bookings (for admins/managers)\n  list: async () => {\n    try {\n      const response = await apiFetch('/api/bookings');\n      return response.bookings || [];\n    } catch (error) {\n      console.error('Error fetching bookings:', error);\n      return [];\n    }\n  },\n  \n  // Create a new booking\n  create: async (booking) => {\n    try {\n      const response = await apiFetch('/api/bookings', {\n        method: 'POST',\n        body: JSON.stringify(booking)\n      });\n      return response.booking;\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      throw error;\n    }\n  },\n  \n  // Get bookings for the current user\n  byUser: async (userId) => {\n    try {\n      const response = await apiFetch('/api/bookings/me');\n      return response.bookings || [];\n    } catch (error) {\n      console.error('Error fetching user bookings:', error);\n      return [];\n    }\n  },\n  \n  // Get a specific booking by ID\n  getById: async (id) => {\n    try {\n      const response = await apiFetch(`/api/bookings/${id}`);\n      return response.booking;\n    } catch (error) {\n      console.error(`Error fetching booking ${id}:`, error);\n      return null;\n    }\n  },\n  \n  // Update booking status (approve/reject)\n  updateStatus: async (id, status) => {\n    try {\n      const response = await apiFetch(`/api/bookings/${id}/status`, {\n        method: 'PATCH',\n        body: JSON.stringify({ status })\n      });\n      return response.booking;\n    } catch (error) {\n      console.error(`Error updating booking status for ${id}:`, error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}