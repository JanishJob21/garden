{"ast":null,"code":"var _jsxFileName = \"D:\\\\full stacks\\\\Garden\\\\garden-scheduler\\\\src\\\\components\\\\GoogleLoginButton.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GoogleLoginButton() {\n  _s();\n  const {\n    googleLogin\n  } = useAuth();\n  const navigate = useNavigate();\n  const handleCredentialResponse = useCallback(async response => {\n    console.log('Google credential response received');\n    try {\n      await googleLogin(response.credential);\n      navigate('/dashboard');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Google login failed:', error);\n      alert('Google login failed. ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Please try again.'));\n    }\n  }, [googleLogin, navigate]);\n  useEffect(() => {\n    // Function to initialize Google Sign-In\n    const initializeGoogleSignIn = () => {\n      if (!window.google) {\n        console.error('Google API not loaded');\n        return;\n      }\n      try {\n        // Initialize the Google Auth2 client\n        window.google.accounts.id.initialize({\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n          callback: handleCredentialResponse,\n          auto_select: true\n        });\n\n        // Render the button\n        window.google.accounts.id.renderButton(document.getElementById('googleSignInButton'), {\n          type: 'standard',\n          theme: 'outline',\n          size: 'large',\n          text: 'signin_with',\n          shape: 'rectangular',\n          width: 250\n        });\n\n        // Show the One Tap dialog\n        window.google.accounts.id.prompt(notification => {\n          if (notification.isNotDisplayed() || notification.isSkippedMoment()) {\n            console.log('One Tap prompt was not displayed');\n          }\n        });\n      } catch (error) {\n        console.error('Error initializing Google Sign-In:', error);\n      }\n    };\n\n    // Add a script to load the Google API if it's not already loaded\n    if (!window.google) {\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.defer = true;\n      script.onload = initializeGoogleSignIn;\n      script.onerror = () => console.error('Failed to load Google API');\n      document.body.appendChild(script);\n    } else {\n      initializeGoogleSignIn();\n    }\n\n    // Cleanup function\n    return () => {\n      // Cleanup if needed\n    };\n  }, [handleCredentialResponse]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"google-login\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"googleSignInButton\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(GoogleLoginButton, \"8BOeRS6873pVwzUnv7VV/zFDYW4=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = GoogleLoginButton;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginButton\");","map":{"version":3,"names":["useEffect","useCallback","useAuth","useNavigate","jsxDEV","_jsxDEV","GoogleLoginButton","_s","googleLogin","navigate","handleCredentialResponse","response","console","log","credential","error","_error$response","_error$response$data","alert","data","message","initializeGoogleSignIn","window","google","accounts","id","initialize","client_id","process","env","REACT_APP_GOOGLE_CLIENT_ID","callback","auto_select","renderButton","document","getElementById","type","theme","size","text","shape","width","prompt","notification","isNotDisplayed","isSkippedMoment","script","createElement","src","async","defer","onload","onerror","body","appendChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/full stacks/Garden/garden-scheduler/src/components/GoogleLoginButton.js"],"sourcesContent":["import { useEffect, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function GoogleLoginButton() {\n  const { googleLogin } = useAuth();\n  const navigate = useNavigate();\n\n  const handleCredentialResponse = useCallback(async (response) => {\n    console.log('Google credential response received');\n    try {\n      await googleLogin(response.credential);\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Google login failed:', error);\n      alert('Google login failed. ' + (error.response?.data?.message || 'Please try again.'));\n    }\n  }, [googleLogin, navigate]);\n\n  useEffect(() => {\n    // Function to initialize Google Sign-In\n    const initializeGoogleSignIn = () => {\n      if (!window.google) {\n        console.error('Google API not loaded');\n        return;\n      }\n\n      try {\n        // Initialize the Google Auth2 client\n        window.google.accounts.id.initialize({\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n          callback: handleCredentialResponse,\n          auto_select: true,\n        });\n\n        // Render the button\n        window.google.accounts.id.renderButton(\n          document.getElementById('googleSignInButton'),\n          {\n            type: 'standard',\n            theme: 'outline',\n            size: 'large',\n            text: 'signin_with',\n            shape: 'rectangular',\n            width: 250,\n          }\n        );\n\n        // Show the One Tap dialog\n        window.google.accounts.id.prompt(notification => {\n          if (notification.isNotDisplayed() || notification.isSkippedMoment()) {\n            console.log('One Tap prompt was not displayed');\n          }\n        });\n      } catch (error) {\n        console.error('Error initializing Google Sign-In:', error);\n      }\n    };\n\n    // Add a script to load the Google API if it's not already loaded\n    if (!window.google) {\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.defer = true;\n      script.onload = initializeGoogleSignIn;\n      script.onerror = () => console.error('Failed to load Google API');\n      document.body.appendChild(script);\n    } else {\n      initializeGoogleSignIn();\n    }\n\n    // Cleanup function\n    return () => {\n      // Cleanup if needed\n    };\n  }, [handleCredentialResponse]);\n\n  return (\n    <div className=\"google-login\">\n      <div id=\"googleSignInButton\"></div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC1C,MAAM;IAAEC;EAAY,CAAC,GAAGN,OAAO,CAAC,CAAC;EACjC,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAMO,wBAAwB,GAAGT,WAAW,CAAC,MAAOU,QAAQ,IAAK;IAC/DC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,IAAI;MACF,MAAML,WAAW,CAACG,QAAQ,CAACG,UAAU,CAAC;MACtCL,QAAQ,CAAC,YAAY,CAAC;IACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdL,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CG,KAAK,CAAC,uBAAuB,IAAI,EAAAF,eAAA,GAAAD,KAAK,CAACJ,QAAQ,cAAAK,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBG,IAAI,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBG,OAAO,KAAI,mBAAmB,CAAC,CAAC;IACzF;EACF,CAAC,EAAE,CAACZ,WAAW,EAAEC,QAAQ,CAAC,CAAC;EAE3BT,SAAS,CAAC,MAAM;IACd;IACA,MAAMqB,sBAAsB,GAAGA,CAAA,KAAM;MACnC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAE;QAClBX,OAAO,CAACG,KAAK,CAAC,uBAAuB,CAAC;QACtC;MACF;MAEA,IAAI;QACF;QACAO,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;UACnCC,SAAS,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B;UACjDC,QAAQ,EAAErB,wBAAwB;UAClCsB,WAAW,EAAE;QACf,CAAC,CAAC;;QAEF;QACAV,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACQ,YAAY,CACpCC,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC,EAC7C;UACEC,IAAI,EAAE,UAAU;UAChBC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAE,OAAO;UACbC,IAAI,EAAE,aAAa;UACnBC,KAAK,EAAE,aAAa;UACpBC,KAAK,EAAE;QACT,CACF,CAAC;;QAED;QACAnB,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACiB,MAAM,CAACC,YAAY,IAAI;UAC/C,IAAIA,YAAY,CAACC,cAAc,CAAC,CAAC,IAAID,YAAY,CAACE,eAAe,CAAC,CAAC,EAAE;YACnEjC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;UACjD;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D;IACF,CAAC;;IAED;IACA,IAAI,CAACO,MAAM,CAACC,MAAM,EAAE;MAClB,MAAMuB,MAAM,GAAGZ,QAAQ,CAACa,aAAa,CAAC,QAAQ,CAAC;MAC/CD,MAAM,CAACE,GAAG,GAAG,wCAAwC;MACrDF,MAAM,CAACG,KAAK,GAAG,IAAI;MACnBH,MAAM,CAACI,KAAK,GAAG,IAAI;MACnBJ,MAAM,CAACK,MAAM,GAAG9B,sBAAsB;MACtCyB,MAAM,CAACM,OAAO,GAAG,MAAMxC,OAAO,CAACG,KAAK,CAAC,2BAA2B,CAAC;MACjEmB,QAAQ,CAACmB,IAAI,CAACC,WAAW,CAACR,MAAM,CAAC;IACnC,CAAC,MAAM;MACLzB,sBAAsB,CAAC,CAAC;IAC1B;;IAEA;IACA,OAAO,MAAM;MACX;IAAA,CACD;EACH,CAAC,EAAE,CAACX,wBAAwB,CAAC,CAAC;EAE9B,oBACEL,OAAA;IAAKkD,SAAS,EAAC,cAAc;IAAAC,QAAA,eAC3BnD,OAAA;MAAKoB,EAAE,EAAC;IAAoB;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV;AAACrD,EAAA,CA/EuBD,iBAAiB;EAAA,QACfJ,OAAO,EACdC,WAAW;AAAA;AAAA0D,EAAA,GAFNvD,iBAAiB;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}