{"ast":null,"code":"// Simple API client with token support and CRA proxy to http://localhost:4000\nconst API_BASE = ''; // CRA proxy handles /api/* to backend\n\nlet token = null;\nexport const setToken = t => {\n  token = t;\n  if (t) localStorage.setItem('gs_token', t);else localStorage.removeItem('gs_token');\n};\nexport const getToken = () => token || localStorage.getItem('gs_token');\nasync function apiFetch(path, options = {}) {\n  const headers = {\n    'Content-Type': 'application/json',\n    ...(options.headers || {})\n  };\n  const t = getToken();\n  if (t) headers['Authorization'] = `Bearer ${t}`;\n  try {\n    const res = await fetch(`${API_BASE}${path}`, {\n      ...options,\n      headers\n    });\n    const responseData = await res.json().catch(() => ({}));\n    if (!res.ok) {\n      // Create an error object with response details\n      const error = new Error(responseData.message || `HTTP ${res.status}: ${res.statusText}`);\n      error.response = {\n        status: res.status,\n        statusText: res.statusText,\n        data: responseData\n      };\n      if (res.status === 401) {\n        // For auth endpoints, show the real error (e.g., invalid credentials)\n        if (String(path).startsWith('/api/auth')) {\n          throw error;\n        }\n        // For other endpoints, clear session and prompt re-login\n        try {\n          localStorage.removeItem('gs_user');\n        } catch {}\n        setToken(null);\n        error.message = 'Session expired or invalid. Please login again.';\n        throw error;\n      }\n\n      // For 403 Forbidden, include the error message from the server if available\n      if (res.status === 403) {\n        error.message = responseData.message || 'You do not have permission to access this resource.';\n      }\n      throw error;\n    }\n    return responseData;\n  } catch (error) {\n    // If it's already our error with response, rethrow it\n    if (error.response) throw error;\n\n    // Handle network errors and other exceptions\n    const networkError = new Error(error.message || 'Network error. Please check your connection.');\n    networkError.isNetworkError = true;\n    throw networkError;\n  }\n}\n\n// Auth\nexport const authRegister = payload => apiFetch('/api/auth/register', {\n  method: 'POST',\n  body: JSON.stringify(payload)\n});\nexport const authLogin = payload => apiFetch('/api/auth/login', {\n  method: 'POST',\n  body: JSON.stringify(payload)\n});\nexport const authMe = () => apiFetch('/api/auth/me');\nexport const authLogout = () => apiFetch('/api/auth/logout', {\n  method: 'POST'\n});\n\n// Admin Users\nexport const usersList = () => apiFetch('/api/users');\nexport const usersUpdateRole = (id, role) => apiFetch(`/api/users/${id}/role`, {\n  method: 'PATCH',\n  body: JSON.stringify({\n    role\n  })\n});\n\n// Registrations\nexport const registrationsCreate = payload => apiFetch('/api/registrations', {\n  method: 'POST',\n  body: JSON.stringify(payload)\n});\nexport const registrationsMine = () => apiFetch('/api/registrations/me');\nexport const registrationsList = () => apiFetch('/api/registrations');\n\n// Bookings\nexport const bookingsCreate = payload => apiFetch('/api/bookings', {\n  method: 'POST',\n  body: JSON.stringify(payload)\n});\nexport const bookingsMine = () => apiFetch('/api/bookings/me');\nexport const bookingsList = () => apiFetch('/api/bookings');\nexport const updateBookingStatus = (id, status) => apiFetch(`/api/bookings/${id}/status`, {\n  method: 'PATCH',\n  body: JSON.stringify({\n    status\n  })\n});\n\n// Tools\nexport const toolsCreate = payload => apiFetch('/api/tools', {\n  method: 'POST',\n  body: JSON.stringify(payload)\n});\nexport const toolsMine = () => apiFetch('/api/tools/me');\nexport const toolsList = () => apiFetch('/api/tools');\n\n// Feedback\nexport const feedbackCreate = payload => apiFetch('/api/feedback', {\n  method: 'POST',\n  body: JSON.stringify(payload)\n});\nexport const feedbackMine = () => apiFetch('/api/feedback/me');\nexport const feedbackList = () => apiFetch('/api/feedback');\n\n// Sessions\nexport const sessionsList = ({\n  q = '',\n  status = '',\n  from = '',\n  to = '',\n  page = 1,\n  pageSize = 10\n} = {}) => {\n  const params = new URLSearchParams();\n  if (q) params.set('q', q);\n  if (status) params.set('status', status);\n  if (from) params.set('from', from);\n  if (to) params.set('to', to);\n  params.set('page', String(page));\n  params.set('pageSize', String(pageSize));\n  return apiFetch(`/api/sessions?${params.toString()}`);\n};\nexport const sessionsSummary = () => apiFetch('/api/sessions/summary');\nexport const sessionsDelete = id => apiFetch(`/api/sessions/${id}`, {\n  method: 'DELETE'\n});","map":{"version":3,"names":["API_BASE","token","setToken","t","localStorage","setItem","removeItem","getToken","getItem","apiFetch","path","options","headers","res","fetch","responseData","json","catch","ok","error","Error","message","status","statusText","response","data","String","startsWith","networkError","isNetworkError","authRegister","payload","method","body","JSON","stringify","authLogin","authMe","authLogout","usersList","usersUpdateRole","id","role","registrationsCreate","registrationsMine","registrationsList","bookingsCreate","bookingsMine","bookingsList","updateBookingStatus","toolsCreate","toolsMine","toolsList","feedbackCreate","feedbackMine","feedbackList","sessionsList","q","from","to","page","pageSize","params","URLSearchParams","set","toString","sessionsSummary","sessionsDelete"],"sources":["D:/full stacks/Garden/garden-scheduler/src/services/api.js"],"sourcesContent":["// Simple API client with token support and CRA proxy to http://localhost:4000\nconst API_BASE = ''; // CRA proxy handles /api/* to backend\n\nlet token = null;\n\nexport const setToken = (t) => {\n  token = t;\n  if (t) localStorage.setItem('gs_token', t);\n  else localStorage.removeItem('gs_token');\n};\n\nexport const getToken = () => token || localStorage.getItem('gs_token');\n\nasync function apiFetch(path, options = {}) {\n  const headers = { 'Content-Type': 'application/json', ...(options.headers || {}) };\n  const t = getToken();\n  if (t) headers['Authorization'] = `Bearer ${t}`;\n  \n  try {\n    const res = await fetch(`${API_BASE}${path}`, { ...options, headers });\n    const responseData = await res.json().catch(() => ({}));\n    \n    if (!res.ok) {\n      // Create an error object with response details\n      const error = new Error(responseData.message || `HTTP ${res.status}: ${res.statusText}`);\n      error.response = {\n        status: res.status,\n        statusText: res.statusText,\n        data: responseData,\n      };\n      \n      if (res.status === 401) {\n        // For auth endpoints, show the real error (e.g., invalid credentials)\n        if (String(path).startsWith('/api/auth')) {\n          throw error;\n        }\n        // For other endpoints, clear session and prompt re-login\n        try { localStorage.removeItem('gs_user'); } catch {}\n        setToken(null);\n        error.message = 'Session expired or invalid. Please login again.';\n        throw error;\n      }\n      \n      // For 403 Forbidden, include the error message from the server if available\n      if (res.status === 403) {\n        error.message = responseData.message || 'You do not have permission to access this resource.';\n      }\n      \n      throw error;\n    }\n    \n    return responseData;\n  } catch (error) {\n    // If it's already our error with response, rethrow it\n    if (error.response) throw error;\n    \n    // Handle network errors and other exceptions\n    const networkError = new Error(error.message || 'Network error. Please check your connection.');\n    networkError.isNetworkError = true;\n    throw networkError;\n  }\n}\n\n// Auth\nexport const authRegister = (payload) => apiFetch('/api/auth/register', {\n  method: 'POST',\n  body: JSON.stringify(payload),\n});\n\nexport const authLogin = (payload) => apiFetch('/api/auth/login', {\n  method: 'POST',\n  body: JSON.stringify(payload),\n});\n\nexport const authMe = () => apiFetch('/api/auth/me');\nexport const authLogout = () => apiFetch('/api/auth/logout', { method: 'POST' });\n\n// Admin Users\nexport const usersList = () => apiFetch('/api/users');\nexport const usersUpdateRole = (id, role) => apiFetch(`/api/users/${id}/role`, {\n  method: 'PATCH',\n  body: JSON.stringify({ role }),\n});\n\n// Registrations\nexport const registrationsCreate = (payload) => apiFetch('/api/registrations', {\n  method: 'POST',\n  body: JSON.stringify(payload),\n});\nexport const registrationsMine = () => apiFetch('/api/registrations/me');\nexport const registrationsList = () => apiFetch('/api/registrations');\n\n// Bookings\nexport const bookingsCreate = (payload) => apiFetch('/api/bookings', {\n  method: 'POST',\n  body: JSON.stringify(payload),\n});\nexport const bookingsMine = () => apiFetch('/api/bookings/me');\nexport const bookingsList = () => apiFetch('/api/bookings');\n\nexport const updateBookingStatus = (id, status) => apiFetch(`/api/bookings/${id}/status`, {\n  method: 'PATCH',\n  body: JSON.stringify({ status }),\n});\n\n// Tools\nexport const toolsCreate = (payload) => apiFetch('/api/tools', {\n  method: 'POST',\n  body: JSON.stringify(payload),\n});\nexport const toolsMine = () => apiFetch('/api/tools/me');\nexport const toolsList = () => apiFetch('/api/tools');\n\n// Feedback\nexport const feedbackCreate = (payload) => apiFetch('/api/feedback', {\n  method: 'POST',\n  body: JSON.stringify(payload),\n});\nexport const feedbackMine = () => apiFetch('/api/feedback/me');\nexport const feedbackList = () => apiFetch('/api/feedback');\n\n// Sessions\nexport const sessionsList = ({ q='', status='', from='', to='', page=1, pageSize=10 }={}) => {\n  const params = new URLSearchParams();\n  if (q) params.set('q', q);\n  if (status) params.set('status', status);\n  if (from) params.set('from', from);\n  if (to) params.set('to', to);\n  params.set('page', String(page));\n  params.set('pageSize', String(pageSize));\n  return apiFetch(`/api/sessions?${params.toString()}`);\n}\nexport const sessionsSummary = () => apiFetch('/api/sessions/summary');\nexport const sessionsDelete = (id) => apiFetch(`/api/sessions/${id}`, {\n  method: 'DELETE'\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}