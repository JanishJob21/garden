{"ast":null,"code":"var _jsxFileName = \"D:\\\\full stacks\\\\Garden\\\\garden-scheduler\\\\src\\\\components\\\\GoogleLoginButton.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GoogleLoginButton() {\n  _s();\n  const {\n    googleLogin\n  } = useAuth();\n  const navigate = useNavigate();\n  const buttonDivRef = useRef(null);\n  const handleCredentialResponse = async response => {\n    try {\n      await googleLogin(response.credential);\n      navigate('/dashboard');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Google login failed:', error);\n      alert('Google login failed. ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Please try again.'));\n    }\n  };\n  useEffect(() => {\n    // Check if the Google Identity Services script is loaded\n    if (window.google) {\n      window.google.accounts.id.initialize({\n        client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n        callback: handleCredentialResponse\n      });\n\n      // Render the button\n      if (buttonDivRef.current) {\n        window.google.accounts.id.renderButton(buttonDivRef.current, {\n          type: 'standard',\n          theme: 'outline',\n          size: 'large',\n          text: 'signin_with',\n          shape: 'rectangular',\n          width: 250\n        });\n      }\n\n      // Also enable the One Tap sign-in\n      window.google.accounts.id.prompt();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"google-login\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: buttonDivRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(GoogleLoginButton, \"yVBOYjaxK8q70jMRWphSy4oFfnc=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = GoogleLoginButton;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginButton\");","map":{"version":3,"names":["useEffect","useRef","useAuth","useNavigate","jsxDEV","_jsxDEV","GoogleLoginButton","_s","googleLogin","navigate","buttonDivRef","handleCredentialResponse","response","credential","error","_error$response","_error$response$data","console","alert","data","message","window","google","accounts","id","initialize","client_id","process","env","REACT_APP_GOOGLE_CLIENT_ID","callback","current","renderButton","type","theme","size","text","shape","width","prompt","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/full stacks/Garden/garden-scheduler/src/components/GoogleLoginButton.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function GoogleLoginButton() {\n  const { googleLogin } = useAuth();\n  const navigate = useNavigate();\n  const buttonDivRef = useRef(null);\n\n  const handleCredentialResponse = async (response) => {\n    try {\n      await googleLogin(response.credential);\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Google login failed:', error);\n      alert('Google login failed. ' + (error.response?.data?.message || 'Please try again.'));\n    }\n  };\n\n  useEffect(() => {\n    // Check if the Google Identity Services script is loaded\n    if (window.google) {\n      window.google.accounts.id.initialize({\n        client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n        callback: handleCredentialResponse,\n      });\n\n      // Render the button\n      if (buttonDivRef.current) {\n        window.google.accounts.id.renderButton(\n          buttonDivRef.current,\n          {\n            type: 'standard',\n            theme: 'outline',\n            size: 'large',\n            text: 'signin_with',\n            shape: 'rectangular',\n            width: 250,\n          }\n        );\n      }\n\n      // Also enable the One Tap sign-in\n      window.google.accounts.id.prompt();\n    }\n  }, []);\n\n  return (\n    <div className=\"google-login\">\n      <div ref={buttonDivRef}></div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC1C,MAAM;IAAEC;EAAY,CAAC,GAAGN,OAAO,CAAC,CAAC;EACjC,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,YAAY,GAAGT,MAAM,CAAC,IAAI,CAAC;EAEjC,MAAMU,wBAAwB,GAAG,MAAOC,QAAQ,IAAK;IACnD,IAAI;MACF,MAAMJ,WAAW,CAACI,QAAQ,CAACC,UAAU,CAAC;MACtCJ,QAAQ,CAAC,YAAY,CAAC;IACxB,CAAC,CAAC,OAAOK,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdC,OAAO,CAACH,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CI,KAAK,CAAC,uBAAuB,IAAI,EAAAH,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBI,IAAI,cAAAH,oBAAA,uBAApBA,oBAAA,CAAsBI,OAAO,KAAI,mBAAmB,CAAC,CAAC;IACzF;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd;IACA,IAAIqB,MAAM,CAACC,MAAM,EAAE;MACjBD,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;QACnCC,SAAS,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B;QACjDC,QAAQ,EAAEnB;MACZ,CAAC,CAAC;;MAEF;MACA,IAAID,YAAY,CAACqB,OAAO,EAAE;QACxBV,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACQ,YAAY,CACpCtB,YAAY,CAACqB,OAAO,EACpB;UACEE,IAAI,EAAE,UAAU;UAChBC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAE,OAAO;UACbC,IAAI,EAAE,aAAa;UACnBC,KAAK,EAAE,aAAa;UACpBC,KAAK,EAAE;QACT,CACF,CAAC;MACH;;MAEA;MACAjB,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACe,MAAM,CAAC,CAAC;IACpC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACElC,OAAA;IAAKmC,SAAS,EAAC,cAAc;IAAAC,QAAA,eAC3BpC,OAAA;MAAKqC,GAAG,EAAEhC;IAAa;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEV;AAACvC,EAAA,CAhDuBD,iBAAiB;EAAA,QACfJ,OAAO,EACdC,WAAW;AAAA;AAAA4C,EAAA,GAFNzC,iBAAiB;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}